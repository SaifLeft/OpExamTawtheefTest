// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TawtheefTest.Data.Structure;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Assignment> Assignments { get; set; }

    public virtual DbSet<Candidate> Candidates { get; set; }

    public virtual DbSet<CandidateAnswer> CandidateAnswers { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<ExamQuestionSetManpping> ExamQuestionSetManppings { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<MatchingPair> MatchingPairs { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Option> Options { get; set; }

    public virtual DbSet<OptionChoice> OptionChoices { get; set; }

    public virtual DbSet<OrderingItem> OrderingItems { get; set; }

    public virtual DbSet<OtpVerification> OtpVerifications { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionSet> QuestionSets { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Assignment>(entity =>
        {
            entity.ToTable("Assignment");

            entity.Property(e => e.CandidateId).HasColumnType("integer(10)");
            entity.Property(e => e.CompletedQuestions).HasColumnType("integer(10)");
            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.EasyQuestionsCorrect).HasColumnType("integer(10)");
            entity.Property(e => e.ExamId).HasColumnType("integer(10)");
            entity.Property(e => e.HardQuestionsCorrect).HasColumnType("integer(10)");
            entity.Property(e => e.MaxPossiblePoints).HasColumnType("integer(10)");
            entity.Property(e => e.MediumQuestionsCorrect).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionReplaced).HasColumnType("integer(10)");
            entity.Property(e => e.RankPosition).HasColumnType("integer(10)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'NotStarted'");
            entity.Property(e => e.TotalPoints).HasColumnType("integer(10)");
            entity.Property(e => e.TotalQuestions).HasColumnType("integer(10)");

            entity.HasOne(d => d.Candidate).WithMany(p => p.Assignments)
                .HasForeignKey(d => d.CandidateId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Exam).WithMany(p => p.Assignments)
                .HasForeignKey(d => d.ExamId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Candidate>(entity =>
        {
            entity.ToTable("Candidate");

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.IsActive).HasColumnType("integer(10)");
            entity.Property(e => e.JobId).HasColumnType("integer(10)");
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Phone).HasColumnType("integer(10)");

            entity.HasOne(d => d.Job).WithMany(p => p.Candidates)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.Restrict);
        });

        modelBuilder.Entity<CandidateAnswer>(entity =>
        {
            entity.Property(e => e.AssignmentId).HasColumnType("integer(10)");
            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.IsCorrect).HasColumnType("integer(10)");
            entity.Property(e => e.IsFlagged).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionId).HasColumnType("integer(10)");
            entity.Property(e => e.SelectedOptionId).HasColumnType("integer(10)");
            entity.Property(e => e.TrueFalseAnswer).HasColumnType("integer(10)");

            entity.HasOne(d => d.Assignment).WithMany(p => p.CandidateAnswers)
                .HasForeignKey(d => d.AssignmentId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Question).WithMany(p => p.CandidateAnswers)
                .HasForeignKey(d => d.QuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.ToTable("Exam");

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.Duration).HasColumnType("integer(10)");
            entity.Property(e => e.EndDate).IsRequired();
            entity.Property(e => e.JobId).HasColumnType("integer(10)");
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.SendExamLinkToApplicants).HasColumnType("integer(1)");
            entity.Property(e => e.ShowResultsImmediately).HasColumnType("integer(1)");
            entity.Property(e => e.StartDate).IsRequired();
            entity.Property(e => e.Status).IsRequired();
            entity.Property(e => e.TotalQuestionsPerCandidate).HasColumnType("integer(10)");

            entity.HasOne(d => d.Job).WithMany(p => p.Exams)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ExamQuestionSetManpping>(entity =>
        {
            entity.ToTable("ExamQuestionSetManpping");

            entity.Property(e => e.DisplayOrder).HasColumnType("integer(10)");
            entity.Property(e => e.ExamId).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionSetId).HasColumnType("integer(10)");

            entity.HasOne(d => d.Exam).WithMany(p => p.ExamQuestionSetManppings).HasForeignKey(d => d.ExamId);

            entity.HasOne(d => d.QuestionSet).WithMany(p => p.ExamQuestionSetManppings).HasForeignKey(d => d.QuestionSetId);
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.ToTable("Job");

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.Title).IsRequired();
        });

        modelBuilder.Entity<MatchingPair>(entity =>
        {
            entity.ToTable("MatchingPair");

            entity.Property(e => e.CorrectOrder).HasColumnType("integer(10)");
            entity.Property(e => e.DisplayOrder).HasColumnType("integer(10)");
            entity.Property(e => e.LeftItem).IsRequired();
            entity.Property(e => e.QuestionId).HasColumnType("integer(10)");
            entity.Property(e => e.RightItem).IsRequired();

            entity.HasOne(d => d.Question).WithMany(p => p.MatchingPairs).HasForeignKey(d => d.QuestionId);
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.ToTable("Notification");

            entity.Property(e => e.CandidateId).HasColumnType("integer(10)");
            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.IsRead).HasColumnType("integer(10)");
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.Title).IsRequired();
            entity.Property(e => e.Type)
                .IsRequired()
                .HasDefaultValueSql("'info'");

            entity.HasOne(d => d.Candidate).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.CandidateId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Option>(entity =>
        {
            entity.ToTable("Option");

            entity.HasOne(d => d.Question).WithMany(p => p.Options)
                .HasForeignKey(d => d.QuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<OptionChoice>(entity =>
        {
            entity.ToTable("OptionChoice");

            entity.Property(e => e.DisplayOrder).HasColumnType("integer(10)");
            entity.Property(e => e.IsCorrect).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionId).HasColumnType("integer(10)");
            entity.Property(e => e.Text).IsRequired();

            entity.HasOne(d => d.Question).WithMany(p => p.OptionChoices).HasForeignKey(d => d.QuestionId);
        });

        modelBuilder.Entity<OrderingItem>(entity =>
        {
            entity.ToTable("OrderingItem");

            entity.Property(e => e.CorrectOrder).HasColumnType("integer(10)");
            entity.Property(e => e.DisplayOrder).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionId).HasColumnType("integer(10)");
            entity.Property(e => e.Text).IsRequired();

            entity.HasOne(d => d.Question).WithMany(p => p.OrderingItems).HasForeignKey(d => d.QuestionId);
        });

        modelBuilder.Entity<OtpVerification>(entity =>
        {
            entity.ToTable("OtpVerification");

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.ExpiresAt).IsRequired();
            entity.Property(e => e.IsVerified).HasColumnType("integer(10)");
            entity.Property(e => e.Otpcode)
                .IsRequired()
                .HasColumnName("OTPCode");
            entity.Property(e => e.PhoneNumber).HasColumnType("integer(10)");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.ToTable("Question");

            entity.Property(e => e.AnswerIndex).HasColumnType("integer(10)");
            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.DifficultyLevel).IsRequired();
            entity.Property(e => e.DisplayOrder).HasColumnType("integer(10)");
            entity.Property(e => e.Index).HasColumnType("integer(10)");
            entity.Property(e => e.Points).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionSetId).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionText).IsRequired();
            entity.Property(e => e.QuestionType).IsRequired();
            entity.Property(e => e.TrueFalseAnswer).HasColumnType("integer(10)");

            entity.HasOne(d => d.QuestionSet).WithMany(p => p.Questions)
                .HasForeignKey(d => d.QuestionSetId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<QuestionSet>(entity =>
        {
            entity.ToTable("QuestionSet");

            entity.Property(e => e.ContentSourceType).IsRequired();
            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("'GETUTCDATE()'");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DifficultySet)
                .IsRequired()
                .HasDefaultValueSql("'medium'");
            entity.Property(e => e.Language)
                .IsRequired()
                .HasDefaultValueSql("'Arabic'");
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.NumberOfCorrectOptions).HasColumnType("integer(10)");
            entity.Property(e => e.NumberOfRows).HasColumnType("integer(10)");
            entity.Property(e => e.OptionsCount).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionCount).HasColumnType("integer(10)");
            entity.Property(e => e.QuestionType).IsRequired();
            entity.Property(e => e.RetryCount).HasColumnType("integer(10)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("0");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}