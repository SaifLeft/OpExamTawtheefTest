// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TawtheefTest.Data.Structure;

#nullable disable

namespace TawtheefTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.13");

            modelBuilder.Entity("TawtheefTest.Data.Structure.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.CandidateAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("CandidateExamId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFlagged")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatchingPairsJson")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderingJson")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SelectedOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SelectedOptionsJson")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CandidateExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("CandidateAnswers", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.CandidateExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompletedQuestions")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("QuestionReplaced")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Score")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("NotStarted");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("CandidateId", "ExamId")
                        .IsUnique();

                    b.ToTable("CandidateExams", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("PassPercentage")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SendExamLinkToApplicants")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowResultsImmediately")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Exams", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.ExamQuestionSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.HasIndex("ExamId", "QuestionSetId")
                        .IsUnique();

                    b.ToTable("ExamQuestionSets", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.MatchingPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LeftItem")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RightItem")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("MatchingPairs", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CandidateId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("info");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.OptionChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("OptionChoices", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.OrderingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorrectOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("OrderingItems", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.OTPVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("OTPVerifications", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("AnswerIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InstructionText")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleAnswer")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("TrueFalseAnswer")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.QuestionSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentSourceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("medium");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileUploadedCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("Arabic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfCorrectOptions")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfRows")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OptionsCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10000)
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QuestionSets", (string)null);
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Candidate", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Job", "Job")
                        .WithMany("Candidates")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.CandidateAnswer", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.CandidateExam", "CandidateExam")
                        .WithMany("CandidateAnswers")
                        .HasForeignKey("CandidateExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TawtheefTest.Data.Structure.Question", "Question")
                        .WithMany("CandidateAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CandidateExam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.CandidateExam", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Candidate", "Candidate")
                        .WithMany("CandidateExams")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TawtheefTest.Data.Structure.Exam", "Exam")
                        .WithMany("CandidateExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Exam", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Job", "Job")
                        .WithMany("Exams")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.ExamQuestionSet", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Exam", "Exam")
                        .WithMany("ExamQuestionSets")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TawtheefTest.Data.Structure.QuestionSet", "QuestionSet")
                        .WithMany("ExamQuestionSets")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("QuestionSet");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.MatchingPair", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Question", "Question")
                        .WithMany("MatchingPairs")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Notification", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.OptionChoice", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Question", "Question")
                        .WithMany("OptionChoices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.OrderingItem", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Question", "Question")
                        .WithMany("OrderingItems")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Question", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TawtheefTest.Data.Structure.QuestionSet", "QuestionSet")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("QuestionSet");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.QuestionOption", b =>
                {
                    b.HasOne("TawtheefTest.Data.Structure.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Candidate", b =>
                {
                    b.Navigation("CandidateExams");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.CandidateExam", b =>
                {
                    b.Navigation("CandidateAnswers");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Exam", b =>
                {
                    b.Navigation("CandidateExams");

                    b.Navigation("ExamQuestionSets");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Job", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.Question", b =>
                {
                    b.Navigation("CandidateAnswers");

                    b.Navigation("MatchingPairs");

                    b.Navigation("OptionChoices");

                    b.Navigation("Options");

                    b.Navigation("OrderingItems");
                });

            modelBuilder.Entity("TawtheefTest.Data.Structure.QuestionSet", b =>
                {
                    b.Navigation("ExamQuestionSets");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
