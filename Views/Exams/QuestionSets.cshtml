@model IEnumerable<TawtheefTest.DTOs.QuestionSetDto>
@{
    ViewData["title"] = "مجموعات الأسئلة في الاختبار";
}

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">
        <span class="text-muted fw-light">الاختبارات / @ViewBag.ExamName /</span> مجموعات الأسئلة
    </h4>

    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">مجموعات الأسئلة</h5>
            <div>
                <a href="@Url.Action("Create", "QuestionSets", new { examId = ViewBag.ExamId })" class="btn btn-primary">
                    <i class="bx bx-plus me-1"></i>
                    إضافة مجموعة أسئلة جديدة
                </a>
                <a href="@Url.Action("Details", "Exams", new { id = ViewBag.ExamId })" class="btn btn-outline-secondary ms-2">
                    <i class="bx bx-arrow-back me-1"></i>
                    العودة إلى الاختبار
                </a>
            </div>
        </div>

        <div class="card-body">
            @if (!Model.Any())
            {
                <div class="alert alert-info text-center">
                    <i class="bx bx-info-circle fs-1 mb-2"></i>
                    <p>لا توجد مجموعات أسئلة في هذا الاختبار. يمكنك إضافة مجموعة أسئلة جديدة باستخدام الزر أعلاه.</p>
                </div>
            }
            else
            {
                <div class="row g-4">
                    @foreach (var questionSet in Model)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    @{
                                        var (statusClass, statusText) = GetStatusDisplay(questionSet.Status);
                                    }
                                    <div class="d-flex justify-content-between mb-2">
                                        <h6 class="card-title mb-0">@questionSet.Name</h6>
                                        <span class="badge rounded-pill bg-@statusClass">@statusText</span>
                                    </div>
                                    <p class="card-text small text-muted mb-3">@(string.IsNullOrEmpty(questionSet.Description) ? "بدون وصف" : questionSet.Description)</p>

                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="badge bg-label-primary">@GetQuestionTypeDisplay(questionSet.QuestionType)</span>
                                        <span class="badge bg-label-info">@questionSet.QuestionCount سؤال</span>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="badge bg-label-secondary">@(questionSet.ContentSources?.FirstOrDefault()?.ContentSourceType != null ? GetContentTypeDisplay(questionSet.ContentSources.First().ContentSourceType) : "غير محدد")</span>
                                        <span class="badge bg-label-warning">@GetDifficultyDisplay(questionSet.Difficulty)</span>
                                    </div>

                                    @if (questionSet.Status == TawtheefTest.Enum.QuestionSetStatus.Completed)
                                    {
                                        <div class="d-flex justify-content-end">
                                            <small class="text-muted">
                                                <i class="bx bx-time me-1"></i>
                                                @questionSet.ProcessedAt?.ToString("yyyy/MM/dd HH:mm")
                                            </small>
                                        </div>
                                    }
                                </div>
                                <div class="card-footer text-center">
                                    <a href="@Url.Action("Details", "QuestionSets", new { id = questionSet.Id })" class="btn btn-sm btn-primary me-1">
                                        <i class="bx bx-show-alt me-1"></i> عرض
                                    </a>
                                    <a href="@Url.Action("Edit", "QuestionSets", new { id = questionSet.Id })" class="btn btn-sm btn-outline-primary me-1">
                                        <i class="bx bx-edit-alt me-1"></i> تعديل
                                    </a>
                                    <a href="@Url.Action("Delete", "QuestionSets", new { id = questionSet.Id })" class="btn btn-sm btn-outline-danger">
                                        <i class="bx bx-trash me-1"></i> حذف
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@functions {
    string GetQuestionTypeDisplay(string questionType)
    {
        return questionType?.ToLower() switch
        {
            "mcq" => "اختيار من متعدد",
            "tf" => "صح / خطأ",
            "open" => "إجابة مفتوحة",
            "fillintheblank" => "ملء الفراغات",
            "ordering" => "ترتيب",
            "matching" => "مطابقة",
            "multiselect" => "اختيار متعدد",
            "shortanswer" => "إجابة قصيرة",
            _ => questionType
        };
    }

    string GetContentTypeDisplay(string contentType)
    {
        return contentType?.ToLower() switch
        {
            "topic" => "موضوع",
            "text" => "نص",
            "link" => "رابط",
            "youtube" => "يوتيوب",
            "document" => "مستند",
            "image" => "صورة",
            "audio" => "صوت",
            "video" => "فيديو",
            _ => contentType
        };
    }

    string GetDifficultyDisplay(string difficulty)
    {
        return difficulty?.ToLower() switch
        {
            "easy" => "سهل",
            "medium" => "متوسط",
            "hard" => "صعب",
            "auto" => "تلقائي",
            _ => difficulty
        };
    }

    (string badge, string text) GetStatusDisplay(TawtheefTest.Enum.QuestionSetStatus status)
    {
        return status switch
        {
            TawtheefTest.Enum.QuestionSetStatus.Pending => ("warning", "في الانتظار"),
            TawtheefTest.Enum.QuestionSetStatus.Processing => ("info", "قيد المعالجة"),
            TawtheefTest.Enum.QuestionSetStatus.Completed => ("success", "مكتمل"),
            TawtheefTest.Enum.QuestionSetStatus.Failed => ("danger", "فشل"),
            _ => ("secondary", status.ToString())
        };
    }
}
