
@model ExamDetailsDTO

@{
    ViewData["Title"] = "معاينة الاختبار";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>معاينة الاختبار</h1>
        <div>
            <a asp-action="Details" asp-route-id="@Model.Id" class="btn btn-secondary me-2">
                <i class="bi bi-arrow-left"></i> العودة
            </a>
        </div>
    </div>

    <div class="alert alert-info mb-4">
        <div class="row">
            <div class="col-md-6">
                <h5>معلومات الاختبار</h5>
                <p><strong>عنوان الاختبار:</strong> @Model.Name</p>
                <p><strong>الوظيفة:</strong> @ViewData["JobName"]</p>
                <p><strong>مستوى الصعوبة:</strong> @GetDifficultyName(Model.Difficulty)</p>
            </div>
            <div class="col-md-6">
                <div id="timer" class="text-center p-3 border rounded bg-light">
                    <h5>الوقت المتبقي</h5>
                    <div class="display-4" id="countdown">@Model.Duration:00</div>
                </div>
            </div>
        </div>
    </div>

</div>

@section Scripts {
                <script>
                    $(document).ready(function() {
                        // Navigation between questions
                        $('.next-question, .prev-question, .question-nav-btn').on('click', function() {
                            const targetIndex = $(this).data('target');
                            $('.question-card').hide();
                            $(`#question-${targetIndex}`).show();
                            updateProgress();
                        });
            
                        // Update progress bar
                        function updateProgress() {
                            const total = $('.question-card').length;
                            const answered = $('input[type="radio"]:checked, input[type="checkbox"]:checked, textarea:filled, input[type="text"]:filled').length;
                            const percent = Math.round((answered / total) * 100);
                            $('.progress-bar').css('width', percent + '%').attr('aria-valuenow', percent).text(percent + '%');
                        }
            
                        // Handle ordering items with drag and drop
                        $('.ordering-item').on('dragstart', function(e) {
                            e.originalEvent.dataTransfer.setData('text/plain', $(this).index());
                            $(this).addClass('dragging');
                        });
            
                        $('.ordering-item').on('dragover', function(e) {
                            e.preventDefault();
                        });
            
                        $('.ordering-item').on('drop', function(e) {
                            e.preventDefault();
                            const sourceIndex = e.originalEvent.dataTransfer.getData('text/plain');
                            const targetIndex = $(this).index();
                            const list = $(this).parent();
                            const items = list.children();
                
                            if (sourceIndex < targetIndex) {
                                $(items[sourceIndex]).insertAfter(items[targetIndex]);
                            } else {
                                $(items[sourceIndex]).insertBefore(items[targetIndex]);
                            }
                
                            // Update hidden inputs order
                            updateOrderingInputs(list.data('question-index'));
                        });
            
                        $('.ordering-item').on('dragend', function() {
                            $(this).removeClass('dragging');
                        });
            
                        function updateOrderingInputs(questionIndex) {
                            const list = $(`ul[data-question-index="${questionIndex}"]`);
                            const items = list.children();
                
                            items.each(function(index) {
                                const optionId = $(this).data('option-id');
                                $(this).find('input[type="hidden"]').val(optionId);
                            });
                        }
            
                        // Countdown timer
                        let duration = parseInt('@Model.Duration');
                        let minutes = duration;
                        let seconds = 0;
            
                        const timer = setInterval(function() {
                            if (seconds === 0) {
                                if (minutes === 0) {
                                    clearInterval(timer);
                                    alert('انتهى وقت الاختبار! - Exam time is up!');
                                    $('#examForm').submit();
                                    return;
                                }
                                minutes--;
                                seconds = 59;
                            } else {
                                seconds--;
                            }
                
                            $('#countdown').text(`${minutes}:${seconds < 10 ? '0' + seconds : seconds}`);
                
                            // Warning when 5 minutes left
                            if (minutes === 5 && seconds === 0) {
                                alert('تبقى 5 دقائق فقط!');
                            }
                        }, 1000);
            
                        // Submit exam handling
                        $('#submitExam').on('click', function() {
                            const total = $('.question-card').length;
                            const answered = $('input[type="radio"]:checked, input[type="checkbox"]:checked, textarea:filled, input[type="text"]:filled').length;
                
                            if (answered < total) {
                                $('#unanswered-warning').show();
                            } else {
                                $('#unanswered-warning').hide();
                            }
                
                            $('#submitModal').modal('show');
                        });
                    });
                </script>
}

@functions {
    private string GetQuestionTypeName(string type)
    {
        return type switch
        {
            "MCQ" => "اختيار من متعدد",
            "TF" => "صح / خطأ",
            "open" => "إجابة مفتوحة",
            "fillInTheBlank" => "ملء الفراغات",
            "ordering" => "ترتيب",
            "matching" => "مطابقة",
            "multiSelect" => "اختيار متعدد",
            "shortAnswer" => "إجابة قصيرة",
            _ => type
        };
    }

    private string GetDifficultyName(string difficulty)
    {
        return difficulty switch
        {
            "easy" => "سهل",
            "medium" => "متوسط",
            "hard" => "صعب",
            _ => difficulty
        };
    }
}
