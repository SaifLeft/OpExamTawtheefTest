@model TawtheefTest.ViewModels.ExamInstructionsViewModel
@{
  ViewData["Title"] = "تعليمات الامتحان - " + Model.ExamName;
}

<style>
  .exam-instructions-container {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    padding: 20px 0;
  }

  .instructions-card {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 20px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    overflow: hidden;
    margin-bottom: 30px;
  }

  .card-header-custom {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 25px;
    border: none;
    position: relative;
  }

  .card-header-custom::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="1" fill="rgba(255,255,255,0.05)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.3;
  }

  .exam-info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin: 25px 0;
  }

  .info-item {
    background: rgba(102, 126, 234, 0.1);
    padding: 15px;
    border-radius: 12px;
    text-align: center;
    border: 2px solid rgba(102, 126, 234, 0.2);
    transition: all 0.3s ease;
  }

  .info-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.15);
  }

  .info-icon {
    font-size: 2.5rem;
    color: #667eea;
    margin-bottom: 10px;
  }

  .info-label {
    font-size: 0.9rem;
    color: #666;
    margin-bottom: 5px;
  }

  .info-value {
    font-size: 1.2rem;
    font-weight: bold;
    color: #333;
  }

  .rules-section {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 15px;
    padding: 25px;
    margin: 20px 0;
    border-left: 5px solid #667eea;
  }

  .rule-item {
    display: flex;
    align-items: flex-start;
    margin-bottom: 15px;
    padding: 12px;
    background: rgba(102, 126, 234, 0.05);
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  .rule-item:hover {
    background: rgba(102, 126, 234, 0.1);
    transform: translateX(5px);
  }

  .rule-icon {
    color: #667eea;
    margin-left: 15px;
    margin-top: 3px;
    font-size: 1.2rem;
  }

  .rule-text {
    flex: 1;
    line-height: 1.6;
    color: #333;
  }

  .start-exam-section {
    text-align: center;
    padding: 30px;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
    border-radius: 15px;
    margin-top: 30px;
  }

  .start-btn {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    color: white;
    padding: 15px 40px;
    font-size: 1.1rem;
    border-radius: 50px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
    box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
  }

  .start-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 40px rgba(102, 126, 234, 0.4);
    color: white;
  }

  .continue-btn {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    border: none;
    color: white;
    padding: 15px 40px;
    font-size: 1.1rem;
    border-radius: 50px;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-block;
    box-shadow: 0 10px 30px rgba(245, 87, 108, 0.3);
    margin-left: 15px;
  }

  .continue-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 15px 40px rgba(245, 87, 108, 0.4);
    color: white;
  }

  .alert-warning-custom {
    background: linear-gradient(135deg, rgba(255, 193, 7, 0.1) 0%, rgba(255, 171, 0, 0.1) 100%);
    border: 2px solid rgba(255, 193, 7, 0.3);
    border-radius: 12px;
    padding: 20px;
    margin: 20px 0;
  }

  .floating-animation {
    animation: floating 3s ease-in-out infinite;
  }

  @@keyframes floating
  {

      0%,
      100% {
        transform: translateY(0px);
      }

      50% {
        transform: translateY(-10px);
      }
    }

    .section-title {
      font-size: 1.5rem;
      font-weight: bold;
      color: #333;
      margin-bottom: 20px;
      display: flex;
      align-items: center;
    }

    .section-title i {
      margin-left: 15px;
      color: #667eea;
    }

    @@media (max-width: 768px) {
        .exam-info-grid {
          grid-template-columns: 1fr;
        }

        .instructions-card {
          margin: 0 10px;
        }

        .start-btn,
        .continue-btn {
          display: block;
          margin: 10px auto;
          width: 100%;
          max-width: 300px;
        }
      }
    </style>

    <div class="exam-instructions-container">
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-10">
            <!-- معلومات الامتحان الأساسية -->
            <div class="instructions-card floating-animation">
              <div class="card-header-custom">
                <div class="row align-items-center">
                  <div class="col-md-8">
                    <h2 class="mb-2">
                      <i class="bi bi-clipboard-check me-3"></i>
                      @Model.ExamName
                    </h2>
                    <p class="mb-0 opacity-90">@Model.JobName</p>
                  </div>
                  <div class="col-md-4 text-end">
                    <h5 class="mb-0">مرحباً @Model.CandidateName</h5>
                  </div>
                </div>
              </div>

              <div class="card-body p-4">

                <!-- معلومات الامتحان -->
                <div class="exam-info-grid">
                  <div class="info-item">
                    <div class="info-icon">
                      <i class="bi bi-clock"></i>
                    </div>
                    <div class="info-label">مدة الامتحان</div>
                    <div class="info-value">@Model.Duration دقيقة</div>
                  </div>

                  <div class="info-item">
                    <div class="info-icon">
                      <i class="bi bi-list-ol"></i>
                    </div>
                    <div class="info-label">عدد الأسئلة</div>
                    <div class="info-value">@Model.TotalQuestions سؤال</div>
                  </div>


                  <div class="info-item">
                    <div class="info-icon">
                      <i class="bi bi-calendar-event"></i>
                    </div>
                    <div class="info-label">التاريخ</div>
                    <div class="info-value">@DateTime.Now.ToString("yyyy/MM/dd")</div>
                  </div>
                </div>

                <!-- تحذير المحاولة السابقة -->
                @if (Model.HasExistingAttempt)
                {
                  <div class="alert-warning-custom">
                    <div class="d-flex align-items-center">
                      <i class="bi bi-exclamation-triangle fs-2 me-3 text-warning"></i>
                      <div>
                        <h6 class="mb-1 text-warning">تنبيه: لديك محاولة سابقة</h6>
                        <p class="mb-0">يمكنك متابعة المحاولة السابقة أو بدء محاولة جديدة. إذا بدأت محاولة
                          جديدة، ستفقد التقدم في المحاولة السابقة.</p>
                      </div>
                    </div>
                  </div>
                }
              </div>
            </div>

            <!-- قواعد الامتحان -->
            <div class="instructions-card">
              <div class="rules-section">
                <h4 class="section-title">
                  <i class="bi bi-shield-check"></i>
                  قواعد الامتحان
                </h4>
                @foreach (var rule in Model.ExamRules)
                {
                  <div class="rule-item">
                    <i class="bi bi-check-circle rule-icon"></i>
                    <span class="rule-text">@rule</span>
                  </div>
                }
              </div>
            </div>

            <!-- التعليمات التقنية -->
            <div class="instructions-card">
              <div class="rules-section">
                <h4 class="section-title">
                  <i class="bi bi-gear"></i>
                  التعليمات التقنية
                </h4>
                @foreach (var instruction in Model.TechnicalInstructions)
                {
                  <div class="rule-item">
                    <i class="bi bi-wrench rule-icon"></i>
                    <span class="rule-text">@instruction</span>
                  </div>
                }
              </div>
            </div>

            <!-- أزرار البدء -->
            <div class="instructions-card">
              <div class="start-exam-section">
                <h4 class="mb-4">هل أنت مستعد لبدء الامتحان؟</h4>
                <p class="text-muted mb-4">
                  تأكد من قراءة جميع التعليمات والقواعد أعلاه قبل البدء. بمجرد النقر على "بدء الامتحان"، سيبدأ
                  العد التنازلي.
                </p>

                <div class="d-flex flex-wrap justify-content-center">
                  @if (Model.HasExistingAttempt)
                  {
                    <a asp-action="Take" asp-route-id="@Model.ExistingAttemptId" class="continue-btn">
                      <i class="bi bi-arrow-right-circle me-2"></i>
                      متابعة المحاولة السابقة
                    </a>
                  }

                  <form asp-action="StartExam" asp-route-id="@Model.ExamId" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="start-btn" id="startExamBtn">
                      <i class="bi bi-play-circle me-2"></i>
                      @(Model.HasExistingAttempt ? "بدء محاولة جديدة" : "بدء الامتحان")
                    </button>
                  </form>
                </div>

                <div class="mt-4">
                  <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left me-2"></i>
                    العودة للصفحة الرئيسية
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    @section Scripts {
      <script>
        document.addEventListener('DOMContentLoaded', function () {
          // تأثيرات تفاعلية للبطاقات
          const cards = document.querySelectorAll('.instructions-card');
          cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.2}s`;
            card.classList.add('fade-in');
          });

          // تأكيد بدء الامتحان
          const startBtn = document.getElementById('startExamBtn');
          if (startBtn) {
            startBtn.addEventListener('click', function (e) {
              const hasExistingAttempt = @Json.Serialize(Model.HasExistingAttempt);
              let confirmMessage = 'هل أنت متأكد من أنك تريد بدء الامتحان؟';

              if (hasExistingAttempt) {
                confirmMessage = 'هل أنت متأكد من أنك تريد بدء محاولة جديدة؟ ستفقد التقدم في المحاولة السابقة.';
              }

              if (!confirm(confirmMessage)) {
                e.preventDefault();
              }
            });
          }

          // إضافة تأثيرات CSS للظهور التدريجي
          const style = document.createElement('style');
          const keyframesRule = 'keyframes';
          style.textContent = `.fade-in { animation: fadeInUp 0.8s ease forwards; opacity: 0; transform: translateY(30px); } @@${keyframesRule} fadeInUp { to { opacity: 1; transform: translateY(0); } }`;
          document.head.appendChild(style);

          // عرض الوقت الحالي
          function updateCurrentTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('ar-SA', {
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            });

            // البحث عن عنصر عرض الوقت (إذا كان موجوداً)
            const timeElement = document.querySelector('.current-time');
            if (timeElement) {
              timeElement.textContent = timeString;
            }
          }

          updateCurrentTime();
          setInterval(updateCurrentTime, 1000);
        });
      </script>
    }

    <style>
      .fade-in {
        opacity: 0;
        transform: translateY(30px);
      }
    </style>
