
@model CandidateExam

@{
    ViewData["Title"] = "أداء الاختبار";
    var candidateAnswers = ViewData["CandidateAnswers"] as IEnumerable<OpExamTawtheefTest.Models.CandidateAnswer>;

    // Create a dictionary for easy lookup of candidate answers
    var answersDictionary = candidateAnswers.ToDictionary(a => a.QuestionId, a => a);

    // Calculate remaining time
    var remainingTime = TimeSpan.Zero;
    if (Model.StartTime.HasValue && !Model.EndTime.HasValue)
    {
        var examDuration = TimeSpan.FromMinutes(Model.Exam.Duration);
        var elapsedTime = DateTime.UtcNow - Model.StartTime.Value;
        remainingTime = examDuration > elapsedTime ? examDuration - elapsedTime : TimeSpan.Zero;
    }
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>أداء الاختبار</h1>
    <div>
        <div id="countdown" class="alert alert-warning mb-0 d-inline-block me-3">
            <i class="bi bi-clock"></i> <span id="timer">00:00:00</span>
        </div>
        <form asp-action="Submit" method="post">
            <input type="hidden" name="id" value="@Model.Id" />
            <button type="submit" class="btn btn-danger"
                onclick="return confirm('هل أنت متأكد من رغبتك في إنهاء الاختبار وتسليم الإجابات؟')">
                <i class="bi bi-check-circle"></i> تسليم الاختبار
            </button>
        </form>
    </div>
</div>

<div class="alert alert-info">
    <div class="d-flex justify-content-between">
        <div>
            <h5 class="mb-0">@Model.Exam.Job.Name</h5>
            <p class="mb-0">نوع الاختبار: @GetQuestionTypeName(Model.Exam.QuestionType)</p>
        </div>
        <div>
            <p class="mb-0">بدأ في: @Model.StartTime?.ToString("yyyy-MM-dd HH:mm")</p>
        </div>
    </div>
</div>

@if (Model.Exam.Questions == null || !Model.Exam.Questions.Any())
{
    <div class="alert alert-warning">
        لا توجد أسئلة متاحة لهذا الاختبار.
    </div>
}
else
{
    <div class="mb-4">
        <div class="progress">
            <div class="progress-bar" id="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0"
                aria-valuemin="0" aria-valuemax="100">0%</div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="list-group question-navigator mb-4">
                @foreach (var question in Model.Exam.Questions.OrderBy(q => q.Id))
                {
                    var isAnswered = answersDictionary.ContainsKey(question.Id);
                    var activeClass = "";

                    <a href="#question-@question.Id"
                        class="list-group-item list-group-item-action question-link @(isAnswered ? "list-group-item-success" : "") @activeClass"
                        data-question-id="@question.Id">
                        سؤال @(Model.Exam.Questions.ToList().IndexOf(question) + 1)
                        @if (isAnswered)
                        {
                            <i class="bi bi-check-circle-fill text-success float-end"></i>
                        }
                    </a>
                }
            </div>

            @if (!Model.QuestionReplaced)
            {
                <div class="card mb-4">
                    <div class="card-header bg-warning">
                        <h6 class="mb-0">مساعدة</h6>
                    </div>
                    <div class="card-body">
                        <p>يمكنك استبدال سؤال واحد بسؤال آخر بنفس المستوى والنوع.</p>
                        <button id="replaceQuestionBtn" class="btn btn-warning btn-sm w-100">
                            <i class="bi bi-arrow-repeat"></i> استبدال السؤال الحالي
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="col-md-9">
            @foreach (var question in Model.Exam.Questions.OrderBy(q => q.Id))
            {
                var answer = answersDictionary.ContainsKey(question.Id) ? answersDictionary[question.Id].Answer : "";
                var questionIndex = Model.Exam.Questions.ToList().IndexOf(question);
                var totalQuestions = Model.Exam.Questions.Count();
                var isFirst = questionIndex == 0;
                var isLast = questionIndex == totalQuestions - 1;

                <div id="question-@question.Id" class="question-container mb-4" style="display: none;"
                    data-index="@questionIndex" data-total="@totalQuestions">
                    <h5>سؤال @(questionIndex + 1) من @totalQuestions</h5>
                    <p>@question.QuestionText</p>

                    <div class="answer-container">
                        @switch (question.QuestionType.ToUpper())
                        {
                            case "MCQ":
                                @foreach (var option in question.Options)
                                {
                                    <div class="form-check mb-2">
                                        <input class="form-check-input exam-choice" type="radio" name="question-@question.Id"
                                            id="option-@option.Id" value="@option.Id" data-question-id="@question.Id"
                                            data-candidate-exam-id="@Model.Id" @(answer == option.Id.ToString() ? "checked" : "")>
                                        <label class="form-check-label" for="option-@option.Id">
                                            @option.OptionText
                                        </label>
                                    </div>
                                }
                                break;

                            case "TF":
                                <div class="form-check mb-2">
                                    <input class="form-check-input exam-choice" type="radio" name="question-@question.Id"
                                        id="option-true-@question.Id" value="true" data-question-id="@question.Id"
                                        data-candidate-exam-id="@Model.Id" @(answer == "true" ? "checked" : "")>
                                    <label class="form-check-label" for="option-true-@question.Id">
                                        صحيح
                                    </label>
                                </div>
                                <div class="form-check mb-2">
                                    <input class="form-check-input exam-choice" type="radio" name="question-@question.Id"
                                        id="option-false-@question.Id" value="false" data-question-id="@question.Id"
                                        data-candidate-exam-id="@Model.Id" @(answer == "false" ? "checked" : "")>
                                    <label class="form-check-label" for="option-false-@question.Id">
                                        خطأ
                                    </label>
                                </div>
                                break;

                            case "OPEN":
                            case "FILLINTHEBLANK":
                            case "SHORTANSWER":
                                <div class="mb-3">
                                    <textarea class="form-control exam-text-answer" id="answer-@question.Id" rows="3"
                                        data-question-id="@question.Id" data-candidate-exam-id="@Model.Id"
                                        placeholder="اكتب إجابتك هنا...">@answer</textarea>
                                </div>
                                break;

                            default:
                                <div class="mb-3">
                                    <textarea class="form-control exam-text-answer" id="answer-@question.Id" rows="3"
                                        data-question-id="@question.Id" data-candidate-exam-id="@Model.Id"
                                        placeholder="اكتب إجابتك هنا...">@answer</textarea>
                                </div>
                                break;
                        }
                    </div>
                    <div class="text-end mt-2">
                        <span id="savedIndicator-@question.Id" class="text-success" style="display: none;">
                            <i class="bi bi-check-circle"></i> تم الحفظ
                        </span>
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <button class="btn btn-outline-primary prev-btn" @(isFirst ? "disabled" : "")>
                            <i class="bi bi-arrow-left"></i> السابق
                        </button>
                        <button class="btn btn-outline-primary next-btn" @(isLast ? "disabled" : "")>
                            التالي <i class="bi bi-arrow-right"></i>
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize timer
            var durationInSeconds = @((int)remainingTime.TotalSeconds);
            var timer;

            function startTimer() {
                timer = setInterval(function () {
                    durationInSeconds--;

                    if (durationInSeconds <= 0) {
                        clearInterval(timer);
                        // Auto-submit when time is up
                        alert('انتهى الوقت! سيتم تسليم الاختبار تلقائياً.');
                        $('form[action="/CandidateExams/Submit"]').submit();
                    }

                    updateTimerDisplay();
                }, 1000);
            }

            function updateTimerDisplay() {
                var hours = Math.floor(durationInSeconds / 3600);
                var minutes = Math.floor((durationInSeconds % 3600) / 60);
                var seconds = durationInSeconds % 60;

                var display =
                    (hours < 10 ? "0" + hours : hours) + ":" +
                    (minutes < 10 ? "0" + minutes : minutes) + ":" +
                    (seconds < 10 ? "0" + seconds : seconds);

                $("#timer").text(display);

                // Change color when less than 5 minutes remaining
                if (durationInSeconds < 300) {
                    $("#countdown").removeClass("alert-warning").addClass("alert-danger");
                }
            }

            startTimer();
            updateTimerDisplay();

            // Update progress bar
            function updateProgress() {
                var totalQuestions = $('.question-container').length;
                var answeredQuestions = 0;

                        @foreach (var question in Model.Exam.Questions)
                    {
                        if (answersDictionary.ContainsKey(question.Id))
                        {
                            <text>answeredQuestions++;</text>
                    }
                    }
                
                        var progressPercentage = (answeredQuestions / totalQuestions) * 100;
                $('#progress-bar').css('width', progressPercentage + '%');
                $('#progress-bar').attr('aria-valuenow', progressPercentage);
                $('#progress-bar').text(Math.round(progressPercentage) + '%');
            }

            // Initialize progress bar
            updateProgress();

            // Set the first question as active if none is active
            if ($('.question-link.active').length === 0) {
                $('.question-link').first().addClass('active');
                $('.question-container').first().show();
            }

            // Question navigation via sidebar
            $('.question-link').click(function (e) {
                e.preventDefault();
                var targetId = $(this).attr('href');

                // Show the target question
                $('.question-container').hide();
                $(targetId).show();

                // Update active class
                $('.question-link').removeClass('active');
                $(this).addClass('active');
            });

            // Previous button click
            $('.prev-btn').click(function () {
                var currentContainer = $(this).closest('.question-container');
                var currentIndex = parseInt(currentContainer.data('index'));

                if (currentIndex > 0) {
                    currentContainer.hide();
                    $('.question-container[data-index="' + (currentIndex - 1) + '"]').show();

                    // Update active link in sidebar
                    var questionId = $('.question-container[data-index="' + (currentIndex - 1) + '"]').attr('id').replace('question-', '');
                    $('.question-link').removeClass('active');
                    $('.question-link[href="#question-' + questionId + '"]').addClass('active');
                }
            });

            // Next button click
            $('.next-btn').click(function () {
                var currentContainer = $(this).closest('.question-container');
                var currentIndex = parseInt(currentContainer.data('index'));
                var totalQuestions = parseInt(currentContainer.data('total'));

                if (currentIndex < totalQuestions - 1) {
                    currentContainer.hide();
                    $('.question-container[data-index="' + (currentIndex + 1) + '"]').show();

                    // Update active link in sidebar
                    var questionId = $('.question-container[data-index="' + (currentIndex + 1) + '"]').attr('id').replace('question-', '');
                    $('.question-link').removeClass('active');
                    $('.question-link[href="#question-' + questionId + '"]').addClass('active');
                }
            });

            // Autosave answers for multiple choice questions
            $(document).on('change', '.exam-choice', function () {
                var questionId = $(this).data('question-id');
                var candidateExamId = $(this).data('candidate-exam-id');
                var answer = $(this).val();

                saveAnswer(candidateExamId, questionId, answer);
            });

            // Autosave answers for text-based questions (debounced)
            var saveTimeout;
            $(document).on('input', '.exam-text-answer', function () {
                clearTimeout(saveTimeout);

                var input = $(this);
                var questionId = input.data('question-id');
                var candidateExamId = input.data('candidate-exam-id');

                saveTimeout = setTimeout(function () {
                    var answer = input.val();
                    saveAnswer(candidateExamId, questionId, answer);
                }, 1000); // Wait 1 second after typing stops
            });

            // Function to save answer via AJAX
            function saveAnswer(candidateExamId, questionId, answer) {
                $.ajax({
                    url: '@Url.Action("SaveAnswer", "CandidateExams")',
                    type: 'POST',
                    data: {
                        candidateExamId: candidateExamId,
                        questionId: questionId,
                        answer: answer
                    },
                    success: function () {
                        // Show saved indicator briefly
                        $('#savedIndicator-' + questionId).fadeIn().delay(2000).fadeOut();

                        // Update progress and mark question as answered in sidebar
                        $('.question-link[href="#question-' + questionId + '"]').addClass('list-group-item-success');
                        $('.question-link[href="#question-' + questionId + '"]').find('i').remove();
                        $('.question-link[href="#question-' + questionId + '"]').append('<i class="bi bi-check-circle-fill text-success float-end"></i>');

                        updateProgress();
                    },
                    error: function () {
                        alert('حدث خطأ أثناء حفظ إجابتك. يرجى المحاولة مرة أخرى.');
                    }
                });
            }

            // Replace question functionality
            $('#replaceQuestionBtn').click(function () {
                var currentQuestionId = $('.question-container:visible').attr('id').replace('question-', '');

                if (confirm('هل أنت متأكد من رغبتك في استبدال هذا السؤال؟ يمكنك استخدام هذه الميزة مرة واحدة فقط خلال الاختبار.')) {
                    $.ajax({
                        url: '@Url.Action("ReplaceQuestion", "CandidateExams")',
                        type: 'POST',
                        data: {
                            candidateExamId: @Model.Id,
                            questionId: currentQuestionId
                        },
                        success: function (response) {
                            if (response.success) {
                                alert('تم استبدال السؤال بنجاح!');
                                location.reload();
                            } else {
                                alert(response.message || 'حدث خطأ أثناء استبدال السؤال.');
                            }
                        },
                        error: function () {
                            alert('حدث خطأ أثناء استبدال السؤال. يرجى المحاولة مرة أخرى.');
                        }
                    });
                }
            });

            // Prevent leaving the page
            window.addEventListener('beforeunload', function (e) {
                var confirmationMessage = 'تحذير: إذا غادرت هذه الصفحة، سيتم إنهاء الاختبار وتسجيل إجاباتك الحالية.';

                (e || window.event).returnValue = confirmationMessage; // For older browsers
                return confirmationMessage; // For modern browsers
            });
        });
    </script>
}

@functions {
    private string GetQuestionTypeName(string type)
    {
        return type switch
        {
            "MCQ" => "اختيار من متعدد",
            "TF" => "صح / خطأ",
            "open" => "إجابة مفتوحة",
            "fillInTheBlank" => "ملء الفراغات",
            "ordering" => "ترتيب",
            "matching" => "مطابقة",
            "multiSelect" => "اختيار متعدد",
            "shortAnswer" => "إجابة قصيرة",
            _ => type
        };
    }
}
