@model AssignmentViewModel

@{
    ViewData["Title"] = "أداء الاختبار";
    var answersDictionary = Model.CandidateAnswers.ToDictionary(a => a.QuestionId, a => a);
}

<style>
    /* تحسينات مخصصة قليلة فقط للأشياء غير المتوفرة في Bootstrap */
    .timer-pulse {
        animation: pulse 2s infinite;
    }

    @@keyframes pulse {
        0%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    100% {
        transform: scale(1);
    }

    }

    .question-nav-btn {
        transition: all 0.3s ease;
        aspect-ratio: 1;
        min-height: 40px;
    }

        .question-nav-btn:hover {
            transform: translateY(-2px);
        }

    .quiz-progress {
        height: 8px;
        border-radius: 10px;
    }

    .sticky-timer {
        position: sticky;
        top: 20px;
        z-index: 100;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .handle {
        cursor: grab;
    }

        .handle:active {
            cursor: grabbing;
        }

    .sortable-ghost {
        opacity: 0.4;
    }

    .connection-status {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1060;
        min-width: 300px;
    }

    @@media (max-width: 768px) {
        .question-nav-btn

    {
        min-height: 35px;
        font-size: 0.875rem;
    }

    .connection-status {
        right: 10px;
        left: 10px;
        min-width: auto;
    }

    }</style>

@Html.AntiForgeryToken()

<!-- تنبيه فقدان الاتصال -->
<div id="connection-lost-alert" class="alert alert-danger alert-dismissible d-none connection-status shadow-lg" role="alert">
    <div class="d-flex align-items-center">
        <i class="bi bi-wifi-off fs-4 me-2"></i>
        <div class="flex-grow-1">
            <strong>انقطع الاتصال بالخادم</strong>
            <p class="mb-0 small">تأكد من اتصال الإنترنت</p>
        </div>
        <button id="reconnect-button" type="button" class="btn btn-outline-light btn-sm me-2">
            <i class="bi bi-arrow-clockwise me-1"></i>إعادة الاتصال
        </button>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert"></button>
    </div>
</div>

<!-- الحاوي الرئيسي -->
<div class="container-fluid py-3">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-0 shadow-sm bg-gradient bg-primary text-white">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-lg-8">
                            <h1 class="h3 mb-1">@Model.ExamTitle</h1>
                            <div class="d-flex flex-wrap gap-3 small">
                                <span><i class="bi bi-person-fill me-1"></i>@Model.CandidateName</span>
                                <span><i class="bi bi-briefcase-fill me-1"></i>@Model.JobTitle</span>
                                <span><i class="bi bi-clock-fill me-1"></i>المدة: @Model.Duration دقيقة</span>
                            </div>
                        </div>
                        <div class="col-lg-4 text-lg-end mt-3 mt-lg-0">
                            <!-- العداد التنازلي -->
                            <div id="countdown" class="bg-white text-dark p-3 rounded-3 shadow sticky-timer">
                                <div class="text-center">
                                    <div class="small text-muted mb-1">الوقت المتبقي</div>
                                    <div id="timer" class="h4 mb-1 font-monospace fw-bold">
                                        @(Model.RemainingTime?.ToString(@"hh\:mm\:ss") ?? "00:00:00")
                                    </div>
                                    <div class="d-flex justify-content-between small text-muted">
                                        <span>ساعة</span>
                                        <span>دقيقة</span>
                                        <span>ثانية</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <!-- الشريط الجانبي -->
        <div class="col-xl-3 col-lg-4">
            <!-- معلومات التقدم -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light border-0">
                    <h5 class="mb-0 d-flex align-items-center">
                        <i class="bi bi-graph-up me-2 text-primary"></i>
                        تقدم الاختبار
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center mb-3">
                        <div class="col-4">
                            <div class="h4 text-primary mb-0">@Model.CompletedQuestions</div>
                            <small class="text-muted">مجاب</small>
                        </div>
                        <div class="col-4">
                            <div class="h4 text-warning mb-0">@Model.FlaggedQuestions.Count</div>
                            <small class="text-muted">معلم</small>
                        </div>
                        <div class="col-4">
                            <div class="h4 text-secondary mb-0">@(Model.TotalQuestions - Model.CompletedQuestions)</div>
                            <small class="text-muted">متبقي</small>
                        </div>
                    </div>

                    <div class="progress quiz-progress mb-3">
                        <div class="progress-bar bg-gradient" role="progressbar"
                             style="width: @Model.ProgressPercentage%"
                             aria-valuenow="@Model.ProgressPercentage"
                             aria-valuemin="0"
                             aria-valuemax="100">
                        </div>
                    </div>

                    <div class="text-center">
                        <span class="badge bg-success fs-6">@Model.ProgressPercentage%</span>
                    </div>
                </div>
            </div>

            <!-- تنقل الاختبار -->
            <div class="card shadow-sm">
                <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-grid-3x3-gap me-2 text-primary"></i>
                        تنقل الاختبار
                    </h5>
                    <button class="btn btn-outline-primary btn-sm show-flagged-btn">
                        <i class="bi bi-flag me-1"></i>المعلمة
                    </button>
                </div>
                <div class="card-body">
                    <div class="row g-2 quiz-navigation" id="question-navigation">
                        @for (int i = 0; i < Model.Questions.Count; i++)
                        {
                            var question = Model.Questions[i];
                            var isAnswered = answersDictionary.ContainsKey(question.Id);
                            var isFlagged = Model.FlaggedQuestions.Contains(question.Id);

                            var btnClass = "btn-outline-secondary";
                            if (isFlagged) btnClass = "btn-warning";
                            else if (isAnswered) btnClass = "btn-success";

                            <div class="col-3 mb-2">
                                <button type="button"
                                        class="btn @btnClass question-nav-btn w-100 fw-bold"
                                        data-question-index="@i"
                                        data-question-id="@question.Id">
                                    @(i + 1)
                                </button>
                            </div>
                        }
                    </div>

                    <hr class="my-3">

                    <div class="row g-2 text-center small">
                        <div class="col-4">
                            <span class="badge bg-success w-100">مجاب</span>
                        </div>
                        <div class="col-4">
                            <span class="badge bg-warning w-100">معلم</span>
                        </div>
                        <div class="col-4">
                            <span class="badge bg-secondary w-100">لم يجب</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- منطقة الأسئلة -->
        <div class="col-xl-9 col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-light border-0">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h5 class="mb-0">
                                السؤال <span id="current-question-num" class="text-primary">1</span>
                                من <span id="total-questions">@Model.TotalQuestions</span>
                            </h5>
                        </div>
                        <div class="col-md-6 text-md-end mt-2 mt-md-0">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-outline-warning flag-question-btn" data-flagged="false">
                                    <i class="bi bi-flag me-1"></i>تعليم للمراجعة
                                </button>
                                <button type="button" class="btn btn-outline-danger replace-question-btn"
                                        data-bs-toggle="tooltip"
                                        data-bs-placement="bottom"
                                        title="يمكن استخدام هذه الميزة مرة واحدة فقط">
                                    <i class="bi bi-arrow-repeat me-1"></i>استبدال السؤال
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-body" style="min-height: 400px;">
                    <div id="question-container" data-current-index="0" class="fade-in">
                        <!-- سيتم تحميل السؤال هنا -->
                    </div>

                    <!-- مؤشر الحفظ -->
                    <div class="text-end mt-3">
                        <div id="saved-indicator" class="d-none">
                            <span class="badge bg-success fs-6">
                                <i class="bi bi-check-circle me-1"></i>تم حفظ إجابتك
                            </span>
                        </div>
                    </div>
                </div>

                <div class="card-footer bg-light border-0">
                    <div class="row">
                        <div class="col-6">
                            <button type="button" class="btn btn-outline-primary prev-question-btn">
                                <i class="bi bi-arrow-right me-1"></i>السابق
                            </button>
                        </div>
                        <div class="col-6 text-end">
                            <button type="button" class="btn btn-outline-primary next-question-btn">
                                التالي<i class="bi bi-arrow-left ms-1"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- زر التسليم -->
            <div class="text-center mt-4">
                <form asp-action="Submit" method="post" class="d-inline">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-danger btn-lg px-5"
                            onclick="return confirm('هل أنت متأكد من رغبتك في إنهاء الاختبار وتسليم الإجابات؟')">
                        <i class="bi bi-check-circle me-2"></i>تسليم الاختبار
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        $(document).ready(function () {
            // تهيئة tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // متغيرات الاختبار
            const candidateExamId = "@Model.Id";
            let currentQuestionIndex = parseInt("@Model.CurrentQuestionIndex");
            const totalQuestions = parseInt("@Model.TotalQuestions");
            let isOnline = navigator.onLine;

            // مراقبة حالة الاتصال
            function updateConnectionStatus() {
                const online = navigator.onLine;
                const alert = document.getElementById('connection-lost-alert');

                if (online && !isOnline) {
                    alert.classList.add('d-none');
                    isOnline = true;
                } else if (!online && isOnline) {
                    alert.classList.remove('d-none');
                    isOnline = false;
                }
            }

            window.addEventListener('online', updateConnectionStatus);
            window.addEventListener('offline', updateConnectionStatus);

            // إعادة الاتصال
            $('#reconnect-button').on('click', function () {
                location.reload();
            });

            // منع إغلاق الصفحة أثناء الاختبار
            window.addEventListener('beforeunload', function (e) {
                if (window.isSubmitting) return;
                const message = 'هل أنت متأكد من مغادرة الصفحة؟ قد تفقد إجاباتك غير المحفوظة.';
                e.returnValue = message;
                return message;
            });

            $('form').on('submit', function () {
                window.isSubmitting = true;
            });

            // تحميل السؤال الأول
            loadQuestion(currentQuestionIndex);
            updateFlagButton();
            startCountdown();

            // أحداث التنقل
            $(document).on('click', '.question-nav-btn', function () {
                const index = $(this).data('question-index');
                loadQuestion(index);
            });

            $('.prev-question-btn').on('click', function () {
                if (currentQuestionIndex > 0) {
                    loadQuestion(currentQuestionIndex - 1);
                }
            });

            $('.next-question-btn').on('click', function () {
                if (currentQuestionIndex < totalQuestions - 1) {
                    loadQuestion(currentQuestionIndex + 1);
                }
            });

            // تعليم السؤال
            $('.flag-question-btn').on('click', function () {
                const btn = $(this);
                const isFlagged = btn.data('flagged') === true;
                const questionId = btn.data('question-id');
                flagQuestion(questionId, !isFlagged);
            });

            // دعم لوحة المفاتيح
            $(document).on('keydown', function (e) {
                if ($(document.activeElement).is('input, textarea, select')) return;

                if (e.keyCode === 39 && currentQuestionIndex > 0) {
                    loadQuestion(currentQuestionIndex - 1);
                } else if (e.keyCode === 37 && currentQuestionIndex < totalQuestions - 1) {
                    loadQuestion(currentQuestionIndex + 1);
                }
            });

            // عرض الأسئلة المعلمة
            $('.show-flagged-btn').on('click', function () {
                const btn = $(this);
                const showing = btn.hasClass('showing-flagged');

                if (showing) {
                    $('.question-nav-btn').parent().show();
                    btn.removeClass('showing-flagged btn-primary').addClass('btn-outline-primary');
                    btn.html('<i class="bi bi-flag me-1"></i>المعلمة');
                } else {
                    $('.question-nav-btn').parent().hide();
                    $('.question-nav-btn.btn-warning').parent().show();
                    btn.removeClass('btn-outline-primary').addClass('btn-primary showing-flagged');
                    btn.html('<i class="bi bi-eye me-1"></i>جميع الأسئلة');
                }
            });

            // استبدال السؤال
            $('.replace-question-btn').on('click', function () {
                const questionId = $('.flag-question-btn').data('question-id');
                if (!questionId) {
                    showAlert('خطأ', 'يرجى تحديد سؤال لاستبداله', 'danger');
                    return;
                }

                if (!confirm('هل أنت متأكد من استبدال هذا السؤال؟ يمكنك استخدام هذه الميزة مرة واحدة فقط.')) {
                    return;
                }

                $.ajax({
                    url: '/CandidateExams/ReplaceQuestion',
                    type: 'POST',
                    data: { AssignmentId: candidateExamId, questionId: questionId },
                    success: function (response) {
                        if (response.success) {
                            $('.replace-question-btn').prop('disabled', true)
                                .removeClass('btn-outline-danger')
                                .addClass('btn-secondary');
                            showAlert('نجح', 'تم استبدال السؤال بنجاح!', 'success');
                            loadQuestion(currentQuestionIndex);
                        } else {
                            showAlert('خطأ', response.message || 'فشل استبدال السؤال', 'danger');
                        }
                    },
                    error: function () {
                        showAlert('خطأ', 'حدث خطأ أثناء محاولة استبدال السؤال', 'danger');
                    }
                });
            });

            // دالة تحميل السؤال
            function loadQuestion(index) {
                // إضافة تأثير الانتقال
                $('#question-container').removeClass('fade-in');

                $.ajax({
                    url: '/CandidateExams/GetQuestion',
                    type: 'GET',
                    data: { AssignmentId: candidateExamId, questionIndex: index },
                    success: function (response) {
                        if (response.success) {
                            currentQuestionIndex = response.currentIndex;
                            $('#current-question-num').text(currentQuestionIndex + 1);

                            const question = response.question;
                            renderQuestion(question, response.answer);

                            $('.flag-question-btn').data('question-id', question.id);
                            $('.flag-question-btn').data('question-type', question.questionType.toUpperCase());
                            $('.flag-question-btn').data('flagged', question.isFlagged);
                            updateFlagButton();

                            $('.prev-question-btn').prop('disabled', currentQuestionIndex === 0);
                            $('.next-question-btn').prop('disabled', currentQuestionIndex === totalQuestions - 1);

                            // تحديث التنقل
                            $('.question-nav-btn').removeClass('active border-primary');
                            $(`.question-nav-btn[data-question-index="${currentQuestionIndex}"]`)
                                .addClass('active border-primary');

                            // إضافة تأثير الظهور
                            setTimeout(() => {
                                $('#question-container').addClass('fade-in');
                            }, 100);
                        } else {
                            showAlert('خطأ', response.message, 'danger');
                        }
                    },
                    error: function () {
                        showAlert('خطأ', 'حدث خطأ أثناء تحميل السؤال', 'danger');
                    }
                });
            }

            // دالة تحديث زر العلامة
            function updateFlagButton() {
                const btn = $('.flag-question-btn');
                const isFlagged = btn.data('flagged');

                if (isFlagged) {
                    btn.removeClass('btn-outline-warning').addClass('btn-warning');
                    btn.html('<i class="bi bi-flag-fill me-1"></i>إلغاء التعليم');
                } else {
                    btn.removeClass('btn-warning').addClass('btn-outline-warning');
                    btn.html('<i class="bi bi-flag me-1"></i>تعليم للمراجعة');
                }
            }

            // دالة تعليم السؤال
            function flagQuestion(questionId, flagged) {
                $.ajax({
                    url: '/CandidateExams/FlagQuestion',
                    type: 'POST',
                    data: {
                        CandidateExamId: candidateExamId,
                        QuestionId: questionId,
                        IsFlagged: flagged
                    },
                    success: function (response) {
                        if (response.success) {
                            $('.flag-question-btn').data('flagged', flagged);
                            updateFlagButton();

                            const btn = $(`.question-nav-btn[data-question-id="${questionId}"]`);
                            if (flagged) {
                                btn.removeClass('btn-outline-secondary btn-success').addClass('btn-warning');
                            } else {
                                btn.removeClass('btn-warning');
                                const isAnswered = btn.hasClass('answered');
                                if (isAnswered) {
                                    btn.addClass('btn-success');
                                } else {
                                    btn.addClass('btn-outline-secondary');
                                }
                            }

                            showSaveIndicator('success', response.message);
                        }
                    },
                    error: function () {
                        showAlert('خطأ', 'حدث خطأ أثناء تعليم السؤال', 'danger');
                    }
                });
            }

            // دالة عرض السؤال
            function renderQuestion(question, answer) {
                const container = $('#question-container');
                let html = `<div class="mb-4">
                    <h5 class="question-text">${question.questionText}</h5>
                </div>`;

                switch (question.questionType.toUpperCase()) {
                    case 'MCQ':
                        html += '<div class="mt-4">';
                        question.options.forEach(option => {
                            const checked = answer == option.id ? 'checked' : '';
                            html += `
                                <div class="form-check mb-3 p-3 border rounded-3">
                                    <input class="form-check-input answer-option" type="radio" name="answer"
                                        id="option-${option.id}" value="${option.id}" ${checked}
                                        data-question-id="${question.id}">
                                    <label class="form-check-label w-100" for="option-${option.id}">
                                        ${option.text}
                                    </label>
                                </div>
                            `;
                        });
                        html += '</div>';
                        break;

                    case 'TF':
                        html += `
                            <div class="mt-4">
                                <div class="row g-3">
                                    <div class="col-6">
                                        <div class="form-check border rounded-3 p-3 h-100">
                                            <input class="form-check-input answer-option" type="radio" name="answer"
                                                id="option-true" value="true" ${answer === 'true' ? 'checked' : ''}
                                                data-question-id="${question.id}">
                                            <label class="form-check-label w-100 text-center fw-bold text-success" for="option-true">
                                                <i class="bi bi-check-circle fs-1 d-block mb-2"></i>
                                                صحيح
                                            </label>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="form-check border rounded-3 p-3 h-100">
                                            <input class="form-check-input answer-option" type="radio" name="answer"
                                                id="option-false" value="false" ${answer === 'false' ? 'checked' : ''}
                                                data-question-id="${question.id}">
                                            <label class="form-check-label w-100 text-center fw-bold text-danger" for="option-false">
                                                <i class="bi bi-x-circle fs-1 d-block mb-2"></i>
                                                خطأ
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        break;

                    case 'MULTISELECT':
                        let selectedOptions = [];
                        try {
                            if (answer) selectedOptions = JSON.parse(answer);
                        } catch (e) {
                            selectedOptions = [];
                        }

                        html += '<div class="mt-4">';
                        html += '<div class="alert alert-info mb-3"><i class="bi bi-info-circle me-2"></i>يمكنك اختيار أكثر من إجابة صحيحة</div>';
                        question.options.forEach(option => {
                            const checked = selectedOptions.includes(option.id) ? 'checked' : '';
                            html += `
                                <div class="form-check mb-3 p-3 border rounded-3">
                                    <input class="form-check-input multi-select-option" type="checkbox" name="answer-${option.id}"
                                        id="option-${option.id}" value="${option.id}" ${checked}
                                        data-question-id="${question.id}">
                                    <label class="form-check-label w-100" for="option-${option.id}">
                                        ${option.text}
                                    </label>
                                </div>
                            `;
                        });
                        html += '<button class="btn btn-primary save-multi-select mt-3"><i class="bi bi-save me-1"></i>حفظ الإجابات</button>';
                        html += '</div>';
                        break;

                    case 'MATCHING':
                        let matchingPairs = {};
                        try {
                            if (answer) matchingPairs = JSON.parse(answer);
                        } catch (e) {
                            matchingPairs = {};
                        }

                        if (question.matchingPairs && question.matchingPairs.length > 0) {
                            html += '<div class="matching-container mt-4">';
                            html += '<div class="alert alert-info mb-3"><i class="bi bi-info-circle me-2"></i>اربط العناصر من العمود الأيمن بما يناسبها من العمود الأيسر</div>';

                            const leftItems = question.matchingPairs.map(pair => ({ id: pair.id, text: pair.leftSide }));
                            const rightItems = question.matchingPairs.map(pair => ({ id: pair.id, text: pair.rightSide }));
                            const shuffledRightItems = [...rightItems].sort(() => Math.random() - 0.5);

                            html += '<div class="matching-pairs-container" data-question-id="' + question.id + '">';
                            leftItems.forEach((leftItem, index) => {
                                const matchedRightId = Object.keys(matchingPairs).find(key => matchingPairs[key] === leftItem.id);
                                html += `
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-5">
                                            <div class="p-3 border rounded-3 bg-light">${shuffledRightItems[index].text}</div>
                                            <input type="hidden" class="right-item-id" value="${shuffledRightItems[index].id}">
                                        </div>
                                        <div class="col-2 text-center">
                                            <i class="bi bi-arrow-left-right fs-4 text-muted"></i>
                                        </div>
                                        <div class="col-5">
                                            <select class="form-select matching-select" data-left-id="${leftItem.id}">
                                                <option value="">اختر العنصر المطابق</option>
                                                ${leftItems.map(item => `<option value="${item.id}" ${matchedRightId == item.id ? 'selected' : ''}>${item.text}</option>`).join('')}
                                            </select>
                                        </div>
                                    </div>
                                `;
                            });
                            html += '</div>';
                            html += '<button class="btn btn-primary save-matching mt-3"><i class="bi bi-save me-1"></i>حفظ المطابقة</button>';
                            html += '</div>';
                        }
                        break;

                    case 'ORDERING':
                        let orderedItems = [];
                        try {
                            if (answer) orderedItems = JSON.parse(answer);
                        } catch (e) {
                            orderedItems = [];
                        }

                        if (question.orderingItems && question.orderingItems.length > 0) {
                            html += '<div class="ordering-container mt-4">';
                            html += '<div class="alert alert-info mb-3"><i class="bi bi-info-circle me-2"></i>قم بترتيب العناصر التالية بالترتيب الصحيح عن طريق السحب والإفلات</div>';

                            let displayItems = [];
                            if (orderedItems && orderedItems.length > 0) {
                                displayItems = orderedItems.map(text => {
                                    const found = question.orderingItems.find(item => item.text === text);
                                    return found || { text: text };
                                });
                            } else {
                                displayItems = [...question.orderingItems].sort((a, b) => {
                                    const displayOrderA = a.displayOrder !== undefined ? a.displayOrder : 0;
                                    const displayOrderB = b.displayOrder !== undefined ? b.displayOrder : 0;
                                    return displayOrderA - displayOrderB;
                                });
                            }

                            html += '<ul class="list-group ordering-list" data-question-id="' + question.id + '">';
                            displayItems.forEach((item, index) => {
                                if (item && item.text) {
                                    html += `
                                        <li class="list-group-item d-flex align-items-center ordering-item bg-light mb-2 rounded-3"
                                            data-text="${item.text}" data-item-id="${item.id || ''}">
                                            <i class="bi bi-grip-vertical me-3 handle text-muted"></i>
                                            <span class="badge bg-primary me-3 order-number">${index + 1}</span>
                                            <span class="flex-grow-1">${item.text}</span>
                                        </li>
                                    `;
                                }
                            });
                            html += '</ul>';
                            html += '<button class="btn btn-primary save-ordering mt-3"><i class="bi bi-save me-1"></i>حفظ الترتيب</button>';
                            html += '</div>';
                        }
                        break;

                    case 'FILLINTHEBLANK':
                    case 'SHORTANSWER':
                        html += `
                            <div class="mt-4">
                                <label class="form-label fw-bold">أدخل إجابتك:</label>
                                <input type="text" class="form-control form-control-lg text-answer"
                                    placeholder="اكتب إجابتك هنا..."
                                    data-question-id="${question.id}" value="${answer || ''}">
                            </div>
                        `;
                        break;

                    default:
                        html += `
                            <div class="mt-4">
                                <label class="form-label fw-bold">أدخل إجابتك:</label>
                                <textarea class="form-control text-answer" rows="6"
                                    placeholder="اكتب إجابتك هنا..."
                                    data-question-id="${question.id}">${answer || ''}</textarea>
                            </div>
                        `;
                        break;
                }

                container.html(html);

                // تسجيل الأحداث
                $('.answer-option').on('change', function () {
                    saveAnswer($(this).data('question-id'), $(this).val());
                });

                $('.text-answer').on('blur', function () {
                    saveAnswer($(this).data('question-id'), $(this).val());
                });

                $('.save-multi-select').on('click', function () {
                    const questionId = $('.multi-select-option').first().data('question-id');
                    const selectedOptions = [];
                    $('.multi-select-option:checked').each(function () {
                        selectedOptions.push(parseInt($(this).val()));
                    });
                    saveAnswer(questionId, JSON.stringify(selectedOptions));
                });

                $('.save-matching').on('click', function () {
                    const questionId = $('.matching-pairs-container').data('question-id');
                    const matchingPairs = {};
                    $('.matching-select').each(function () {
                        const leftId = $(this).data('left-id');
                        const selectedRightId = $(this).val();
                        if (selectedRightId) {
                            matchingPairs[leftId] = selectedRightId;
                        }
                    });
                    saveAnswer(questionId, JSON.stringify(matchingPairs));
                });

                // تفعيل السحب والإفلات للترتيب
                if ($('.ordering-list').length > 0) {
                    new Sortable($('.ordering-list')[0], {
                        animation: 150,
                        handle: '.handle',
                        ghostClass: 'sortable-ghost',
                        onEnd: function () {
                            $('.ordering-item').each(function (index) {
                                $(this).find('.order-number').text(index + 1);
                            });
                        }
                    });

                    $('.save-ordering').on('click', function () {
                        const questionId = $('.ordering-list').data('question-id');
                        const orderedItems = [];
                        $('.ordering-item').each(function () {
                            orderedItems.push($(this).data('text'));
                        });
                        saveAnswer(questionId, JSON.stringify(orderedItems));
                    });
                }
            }

            // دالة حفظ الإجابة
            function saveAnswer(questionId, answer) {
                showSaveIndicator('info', 'جاري حفظ الإجابة...');

                const questionType = $('.flag-question-btn').data('question-type') || '';
                const model = {
                    CandidateExamId: candidateExamId,
                    QuestionId: questionId,
                    QuestionType: questionType,
                    AnswerText: answer,
                    IsCompleted: true,
                    IsFlagged: $('.flag-question-btn').data('flagged') || false
                };

                if (questionType === "MULTISELECT") {
                    model.SelectedOptionsIds = [];
                    $('.multi-select-option:checked').each(function () {
                        model.SelectedOptionsIds.push(parseInt($(this).val()));
                    });
                }

                $.ajax({
                    url: '/CandidateExams/SaveAnswer',
                    type: 'POST',
                    data: model,
                    headers: {
                        "RequestVerificationToken": $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            const btn = $(`.question-nav-btn[data-question-id="${questionId}"]`);
                            if (!btn.hasClass('btn-warning')) {
                                btn.removeClass('btn-outline-secondary').addClass('btn-success answered');
                            }
                            showSaveIndicator('success', 'تم حفظ إجابتك');
                        } else {
                            showSaveIndicator('danger', response.message || 'حدث خطأ في حفظ الإجابة');
                        }
                    },
                    error: function () {
                        showSaveIndicator('danger', 'حدث خطأ أثناء حفظ الإجابة');
                    }
                });
            }

            // دالة إظهار مؤشر الحفظ
            function showSaveIndicator(type, message) {
                const indicator = $('#saved-indicator');
                const iconClass = type === 'success' ? 'bi-check-circle' :
                                 type === 'danger' ? 'bi-exclamation-circle' : 'bi-clock';
                const bgClass = type === 'success' ? 'bg-success' :
                               type === 'danger' ? 'bg-danger' : 'bg-info';

                indicator.html(`
                    <span class="badge ${bgClass} fs-6">
                        <i class="${iconClass} me-1"></i>${message}
                    </span>
                `).removeClass('d-none');

                if (type === 'success') {
                    setTimeout(() => {
                        indicator.addClass('d-none');
                    }, 3000);
                }
            }

            // دالة بدء العداد التنازلي
            function startCountdown() {
                let remainingSeconds = Math.floor(@(Model.RemainingTime?.TotalSeconds ?? 0));

                if (remainingSeconds <= 0) {
                    showTimeUpModal();
                    return;
                }

                const timerElement = $('#timer');
                const countdownElement = $('#countdown');
                let warningShown = false;
                let finalWarningShown = false;

                const interval = setInterval(function () {
                    remainingSeconds--;

                    if (remainingSeconds <= 0) {
                        clearInterval(interval);
                        showTimeUpModal();
                        return;
                    }

                    const hours = Math.floor(remainingSeconds / 3600);
                    const minutes = Math.floor((remainingSeconds % 3600) / 60);
                    const seconds = Math.floor(remainingSeconds % 60);

                    const formatted = String(hours).padStart(2, '0') + ':' +
                                    String(minutes).padStart(2, '0') + ':' +
                                    String(seconds).padStart(2, '0');

                    timerElement.text(formatted);

                    if (remainingSeconds <= 600 && !warningShown) {
                        warningShown = true;
                        showAlert('تحذير', 'تبقى 10 دقائق فقط على انتهاء وقت الاختبار', 'warning');
                    }

                    if (remainingSeconds <= 60 && !finalWarningShown) {
                        finalWarningShown = true;
                        showAlert('تنبيه عاجل', 'تبقت دقيقة واحدة فقط! سيتم تسليم الاختبار تلقائياً عند انتهاء الوقت', 'danger');
                    }

                    if (remainingSeconds <= 300) {
                        countdownElement.removeClass('bg-white text-dark').addClass('bg-danger text-white timer-pulse');
                    }
                }, 1000);
            }

            // دالة عرض modal انتهاء الوقت
            function showTimeUpModal() {
                const modalHtml = `
                    <div class="modal fade" id="timeUpModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content border-danger">
                                <div class="modal-header bg-danger text-white">
                                    <h5 class="modal-title">
                                        <i class="bi bi-clock me-2"></i>انتهى وقت الاختبار
                                    </h5>
                                </div>
                                <div class="modal-body text-center py-5">
                                    <i class="bi bi-clock text-danger" style="font-size: 4rem;"></i>
                                    <h4 class="mt-3 mb-3">انتهى الوقت المخصص للاختبار</h4>
                                    <p class="text-muted">سيتم تسليم إجاباتك تلقائياً خلال <span id="countdown-final" class="fw-bold text-danger">5</span> ثوانٍ...</p>
                                    <div class="progress mt-3">
                                        <div class="progress-bar bg-danger" role="progressbar" style="width: 100%; animation: countdown 5s linear forwards;"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <style>
                        @@keyframes countdown {
                            from { width: 100%; }
                            to { width: 0%; }
                        }
                    </style>
                `;

                $('body').append(modalHtml);
                const modal = new bootstrap.Modal(document.getElementById('timeUpModal'));
                modal.show();

                let countdown = 5;
                const countdownInterval = setInterval(function () {
                    countdown--;
                    $('#countdown-final').text(countdown);

                    if (countdown <= 0) {
                        clearInterval(countdownInterval);
                        $('form[asp-action="Submit"]').submit();
                    }
                }, 1000);
            }
                    // إضافة هذه الدالة في JavaScript
        function updateProgressDisplay(progressData) {
            if (progressData && progressData.statistics) {
                const stats = progressData.statistics;

                // تحديث مؤشرات التقدم
                $('#completed-count').text(stats.completedQuestions);
                $('#flagged-count').text(stats.flaggedQuestions);
                $('#remaining-count').text(stats.remainingQuestions);

                // تحديث شريط التقدم
                $('.progress-bar').css('width', stats.progressPercentage + '%')
                                  .attr('aria-valuenow', stats.progressPercentage);

                // عرض التحذيرات إذا وجدت
                if (stats.warnings && stats.warnings.length > 0) {
                    stats.warnings.forEach(warning => {
                        showAlert('تنبيه', warning, 'warning');
                    });
                }

                // تحديث معلومات الأداء
                if (stats.averageTimePerQuestion > 0) {
                    updatePerformanceInfo(stats);
                }
            }
        }

        function updatePerformanceInfo(stats) {
            // يمكن إضافة عناصر UI لعرض معلومات الأداء
            const performanceHtml = `
                <div class="performance-info mt-3">
                    <small class="text-muted">
                        متوسط الوقت لكل سؤال: ${stats.averageTimePerQuestion.toFixed(1)} دقيقة
                        ${stats.estimatedCompletionTime ? `| الانتهاء المتوقع: ${stats.estimatedCompletionTime}` : ''}
                    </small>
                </div>
            `;

            if (!$('.performance-info').length) {
                $('.card-body').append(performanceHtml);
            } else {
                $('.performance-info').html(performanceHtml);
            }
        }
            // دالة عرض التنبيهات
            function showAlert(title, message, type) {
                const alertId = 'alert-' + Date.now();
                const alertHtml = `
                    <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show position-fixed shadow-lg"
                         style="top: 100px; right: 20px; z-index: 1055; min-width: 350px; max-width: 500px;">
                        <strong>${title}:</strong> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                `;

                $('body').append(alertHtml);

                setTimeout(function () {
                    $(`#${alertId}`).fadeOut(function () {
                        $(this).remove();
                    });
                }, 8000);
            }
        });
    </script>
}
