@model CandidateExamViewModel

@{
  ViewData["Title"] = "أداء الاختبار";
  var progressPercentage = ViewData["ProgressPercentage"] as int? ?? 0;
  var candidateAnswers = ViewData["CandidateAnswers"] as IEnumerable<CandidateAnswerDTO>;
  var answersDictionary = candidateAnswers?.ToDictionary(a => a.QuestionId, a => a) ?? new Dictionary<int,
  CandidateAnswerDTO>();
}

<div class="d-flex justify-content-between align-items-center mb-4">
  <h1>@Model.ExamTitle</h1>
  <div>
    <div id="countdown" class="alert alert-warning mb-0 d-inline-block me-3">
      <i class="bi bi-clock"></i> <span id="timer">@(Model.RemainingTime?.ToString(@"hh\:mm\:ss") ?? "00:00:00")</span>
    </div>
    <form asp-action="Submit" method="post">
      <input type="hidden" name="id" value="@Model.Id" />
      <button type="submit" class="btn btn-danger"
        onclick="return confirm('هل أنت متأكد من رغبتك في إنهاء الاختبار وتسليم الإجابات؟')">
        <i class="bi bi-check-circle"></i> تسليم الاختبار
      </button>
    </form>
  </div>
</div>

<div class="row">
  <div class="col-md-4">
    <div class="card shadow mb-4">
      <div class="card-header bg-primary text-white d-flex justify-content-between">
        <h5 class="mb-0">معلومات الاختبار</h5>
        <span class="badge bg-light text-dark">@Model.CompletedQuestions / @Model.TotalQuestions</span>
      </div>
      <div class="card-body">
        <div class="mb-3">
          <div class="progress">
            <div class="progress-bar" id="progress-bar" role="progressbar" style="width: @progressPercentage%;"
              aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100">@progressPercentage%</div>
          </div>
        </div>

        <ul class="list-group">
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <span><i class="bi bi-person-fill"></i> المرشح:</span>
            <strong>@Model.CandidateName</strong>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <span><i class="bi bi-briefcase-fill"></i> الوظيفة:</span>
            <strong>@Model.JobTitle</strong>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <span><i class="bi bi-clock-fill"></i> وقت البدء:</span>
            <strong>@Model.StartTime?.ToString("yyyy-MM-dd HH:mm")</strong>
          </li>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <span><i class="bi bi-hourglass-split"></i> المدة:</span>
            <strong>@Model.Duration دقيقة</strong>
          </li>
        </ul>
      </div>
    </div>

    <!-- جزء تنقل الاختبار - مشابه للصورة المرجعية -->
    <div class="card shadow">
      <div class="card-header bg-primary text-white">
        <h5 class="mb-0">تنقل الاختبار</h5>
      </div>
      <div class="card-body">
        <div class="row quiz-navigation">
          @for (int i = 0; i < Model.Questions.Count; i++)
          {
            var question = Model.Questions[i];
            var isAnswered = answersDictionary.ContainsKey(question.Id);
            var isFlagged = Model.FlaggedQuestions.Contains(question.Id);
            var btnClass = isAnswered ? "btn-success" : "btn-outline-secondary";

            if (isFlagged)
            {
              btnClass = "btn-warning";
            }

            <div class="col-2 mb-2">
              <button type="button" class="btn @btnClass question-btn w-100" data-question-index="@i"
                data-question-id="@question.Id">
                @(i + 1)
              </button>
            </div>
          }
        </div>
        <hr>
        <div class="d-flex flex-wrap justify-content-between">
          <div class="mb-2">
            <span class="badge bg-success me-1">&nbsp;</span> مجاب
          </div>
          <div class="mb-2">
            <span class="badge bg-warning me-1">&nbsp;</span> معلم للمراجعة
          </div>
          <div class="mb-2">
            <span class="badge bg-secondary me-1">&nbsp;</span> غير مجاب
          </div>
        </div>
        <div class="d-grid mt-3">
          <a href="javascript:void(0)" class="btn btn-outline-primary show-flagged-btn">
            عرض الأسئلة المعلمة فقط
          </a>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-8">
    <div class="card shadow">
      <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">السؤال <span id="current-question-num">1</span> من <span
            id="total-questions">@Model.TotalQuestions</span></h5>
        <div id="flag-container">
          <button type="button" class="btn btn-outline-warning flag-question-btn me-2" data-flagged="false">
            <i class="bi bi-flag-fill me-1"></i> تعليم للمراجعة
          </button>
          <button type="button" class="btn btn-outline-danger replace-question-btn"
            title="يمكن استخدام هذه الميزة مرة واحدة فقط خلال الاختبار">
            <i class="bi bi-arrow-repeat me-1"></i> استبدال السؤال
          </button>
        </div>
      </div>
      <div class="card-body">
        <div id="question-container" data-current-index="0">
          <!-- سيتم تحميل السؤال هنا -->
        </div>
        <div class="text-end">
          <span id="saved-indicator" class="text-success fade-out" style="display: none;">
            <i class="bi bi-check-circle"></i> تم حفظ إجابتك
          </span>
        </div>
      </div>
      <div class="card-footer d-flex justify-content-between">
        <button type="button" class="btn btn-outline-primary prev-question-btn">
          <i class="bi bi-arrow-right me-1"></i> السابق
        </button>
        <button type="button" class="btn btn-outline-primary next-question-btn">
          التالي <i class="bi bi-arrow-left me-1"></i>
        </button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <script>
    $(document).ready(function () {
      // بيانات الاختبار
      const candidateExamId = @Model.Id;
      let currentQuestionIndex = @Model.CurrentQuestionIndex;
      const totalQuestions = @Model.TotalQuestions;

      // تحميل السؤال الأول
      loadQuestion(currentQuestionIndex);

      // تحديث زر العلامة للمراجعة
      updateFlagButton();

      // بدء العداد التنازلي
      startCountdown();

      // أحداث أزرار التنقل
      $('.question-btn').on('click', function () {
        const index = $(this).data('question-index');
        loadQuestion(index);
      });

      $('.prev-question-btn').on('click', function () {
        if (currentQuestionIndex > 0) {
          loadQuestion(currentQuestionIndex - 1);
        }
      });

      $('.next-question-btn').on('click', function () {
        if (currentQuestionIndex < totalQuestions - 1) {
          loadQuestion(currentQuestionIndex + 1);
        }
      });

      // تفعيل زر العلامة للمراجعة
      $('.flag-question-btn').on('click', function () {
        const btn = $(this);
        const isFlagged = btn.data('flagged') === true;
        const questionId = btn.data('question-id');

        // تبديل حالة العلامة
        flagQuestion(questionId, !isFlagged);
      });

      // دالة تحميل السؤال
      function loadQuestion(index) {
        $.ajax({
          url: '/CandidateExams/GetQuestion',
          type: 'GET',
          data: {
            candidateExamId: candidateExamId,
            questionIndex: index
          },
          success: function (response) {
            if (response.success) {
              // تحديث رقم السؤال الحالي
              currentQuestionIndex = response.currentIndex;
              $('#current-question-num').text(currentQuestionIndex + 1);

              // تحديث محتوى السؤال
              const question = response.question;
              renderQuestion(question, response.answer);

              // تحديث زر العلامة
              $('.flag-question-btn').data('question-id', question.id);
              $('.flag-question-btn').data('flagged', question.isFlagged);
              updateFlagButton();

              // تفعيل/تعطيل أزرار التنقل
              $('.prev-question-btn').prop('disabled', currentQuestionIndex === 0);
              $('.next-question-btn').prop('disabled', currentQuestionIndex === totalQuestions - 1);

              // تحديث التصفح المرئي
              $('.question-btn').removeClass('active');
              $(`.question-btn[data-question-index="${currentQuestionIndex}"]`).addClass('active');
            } else {
              alert(response.message);
            }
          },
          error: function () {
            alert('حدث خطأ أثناء تحميل السؤال');
          }
        });
      }

      // دالة لتحديث زر العلامة
      function updateFlagButton() {
        const btn = $('.flag-question-btn');
        const isFlagged = btn.data('flagged');

        if (isFlagged) {
          btn.removeClass('btn-outline-warning').addClass('btn-warning');
          btn.html('<i class="bi bi-flag-fill me-1"></i> إلغاء التعليم');
        } else {
          btn.removeClass('btn-warning').addClass('btn-outline-warning');
          btn.html('<i class="bi bi-flag me-1"></i> تعليم للمراجعة');
        }
      }

      // دالة تعليم السؤال للمراجعة لاحقاً
      function flagQuestion(questionId, flagged) {
        $.ajax({
          url: '/CandidateExams/FlagQuestion',
          type: 'POST',
          data: {
            CandidateExamId: candidateExamId,
            QuestionId: questionId,
            IsFlagged: flagged
          },
          success: function (response) {
            if (response.success) {
              // تحديث حالة العلامة في واجهة المستخدم
              $('.flag-question-btn').data('flagged', flagged);
              updateFlagButton();

              // تحديث شكل زر السؤال في منطقة التنقل
              const btn = $(`.question-btn[data-question-id="${questionId}"]`);
              if (flagged) {
                btn.removeClass('btn-outline-secondary btn-success').addClass('btn-warning');
              } else {
                // إعادة اللون الأصلي
                const isAnswered = btn.hasClass('answered');
                btn.removeClass('btn-warning');
                if (isAnswered) {
                  btn.addClass('btn-success');
                } else {
                  btn.addClass('btn-outline-secondary');
                }
              }

              // عرض رسالة نجاح
              $('#saved-indicator').text(response.message).show();
              setTimeout(function () {
                $('#saved-indicator').fadeOut();
              }, 2000);
            }
          },
          error: function () {
            alert('حدث خطأ أثناء تعليم السؤال');
          }
        });
      }

      // دالة لعرض السؤال وخيارات الإجابة
      function renderQuestion(question, answer) {
        const container = $('#question-container');
        let html = `<h5>${question.questionText}</h5>`;

        // إنشاء عناصر الإجابة حسب نوع السؤال
        switch (question.questionType.toUpperCase()) {
          case 'MCQ':
            html += '<div class="mt-3">';
            question.options.forEach(option => {
              const checked = answer == option.id ? 'checked' : '';
              html += `
                                  <div class="form-check mb-2">
                                      <input class="form-check-input answer-option" type="radio" name="answer"
                                          id="option-${option.id}" value="${option.id}" ${checked}
                                          data-question-id="${question.id}">
                                      <label class="form-check-label" for="option-${option.id}">
                                          ${option.text}
                                      </label>
                                  </div>
                              `;
            });
            html += '</div>';
            break;

          case 'TF':
            html += `
                              <div class="mt-3">
                                  <div class="form-check mb-2">
                                      <input class="form-check-input answer-option" type="radio" name="answer"
                                          id="option-true" value="true" ${answer === 'true' ? 'checked' : ''}
                                          data-question-id="${question.id}">
                                      <label class="form-check-label" for="option-true">صحيح</label>
                                  </div>
                                  <div class="form-check mb-2">
                                      <input class="form-check-input answer-option" type="radio" name="answer"
                                          id="option-false" value="false" ${answer === 'false' ? 'checked' : ''}
                                          data-question-id="${question.id}">
                                      <label class="form-check-label" for="option-false">خطأ</label>
                                  </div>
                              </div>
                          `;
            break;

          default:
            html += `
                              <div class="mt-3">
                                  <textarea class="form-control text-answer" rows="4"
                                      placeholder="اكتب إجابتك هنا..." data-question-id="${question.id}">${answer || ''}</textarea>
                              </div>
                          `;
            break;
        }

        container.html(html);

        // تسجيل حدث النقر على الخيارات
        $('.answer-option').on('change', function () {
          saveAnswer($(this).data('question-id'), $(this).val());
        });

        // تسجيل حدث التغيير على النص
        $('.text-answer').on('blur', function () {
          saveAnswer($(this).data('question-id'), $(this).val());
        });
      }

      // دالة حفظ الإجابة
      function saveAnswer(questionId, answer) {
        $.ajax({
          url: '/CandidateExams/SaveAnswer',
          type: 'POST',
          data: {
            candidateExamId: candidateExamId,
            questionId: questionId,
            answer: answer
          },
          success: function (response) {
            if (response.success) {
              // تحديث زر السؤال في منطقة التنقل
              const btn = $(`.question-btn[data-question-id="${questionId}"]`);

              // التحقق من حالة العلامة قبل تغيير اللون
              if (!btn.hasClass('btn-warning')) {
                btn.removeClass('btn-outline-secondary').addClass('btn-success answered');
              }

              // إظهار مؤشر الحفظ
              $('#saved-indicator').show();
              setTimeout(function () {
                $('#saved-indicator').fadeOut();
              }, 2000);
            }
          },
          error: function () {
            alert('حدث خطأ أثناء حفظ الإجابة');
          }
        });
      }

      // دالة لبدء العداد التنازلي
      function startCountdown() {
        // تحويل الوقت إلى ثواني
        let remainingSeconds = @(Model.RemainingTime?.TotalSeconds ?? 0);

        if (remainingSeconds <= 0) {
          // تسليم الاختبار تلقائياً عند انتهاء الوقت
          $('form[asp-action="Submit"]').submit();
          return;
        }

        const timerElement = $('#timer');

        // تحديث العداد كل ثانية
        const interval = setInterval(function () {
          remainingSeconds--;

          if (remainingSeconds <= 0) {
            clearInterval(interval);
            // تسليم الاختبار تلقائياً
            $('form[asp-action="Submit"]').submit();
            return;
          }

          // تحويل الثواني إلى تنسيق ساعة:دقيقة:ثانية
          const hours = Math.floor(remainingSeconds / 3600);
          const minutes = Math.floor((remainingSeconds % 3600) / 60);
          const seconds = remainingSeconds % 60;

          const formatted =
            String(hours).padStart(2, '0') + ':' +
            String(minutes).padStart(2, '0') + ':' +
            String(seconds).padStart(2, '0');

          timerElement.text(formatted);

          // إظهار التنبيه في آخر 5 دقائق
          if (remainingSeconds <= 300 && !$('#countdown').hasClass('alert-danger')) {
            $('#countdown').removeClass('alert-warning').addClass('alert-danger');
          }
        }, 1000);
      }

      // دالة عرض الأسئلة المعلمة فقط
      $('.show-flagged-btn').on('click', function () {
        const btn = $(this);
        const showingFlagged = btn.hasClass('showing-flagged');

        if (showingFlagged) {
          // إظهار كل الأسئلة
          $('.question-btn').parent().show();
          btn.removeClass('showing-flagged btn-primary').addClass('btn-outline-primary');
          btn.text('عرض الأسئلة المعلمة فقط');
        } else {
          // إظهار الأسئلة المعلمة فقط
          $('.question-btn').parent().hide();
          $('.question-btn.btn-warning').parent().show();
          btn.removeClass('btn-outline-primary').addClass('btn-primary showing-flagged');
          btn.text('عرض جميع الأسئلة');
        }
      });

      // استبدال السؤال الحالي
      $('.replace-question-btn').on('click', function () {
        const questionId = $('.flag-question-btn').data('question-id');

        if (!questionId) {
          alert('يرجى تحديد سؤال لاستبداله');
          return;
        }

        if (!confirm('هل أنت متأكد من استبدال هذا السؤال؟ يمكنك استخدام هذه الميزة مرة واحدة فقط خلال الاختبار.')) {
          return;
        }

        $.ajax({
          url: '/CandidateExams/ReplaceQuestion',
          type: 'POST',
          data: {
            candidateExamId: candidateExamId,
            questionId: questionId
          },
          success: function (response) {
            if (response.success) {
              // تعطيل زر الاستبدال
              $('.replace-question-btn').prop('disabled', true)
                .removeClass('btn-outline-danger')
                .addClass('btn-secondary')
                .attr('title', 'تم استخدام هذه الميزة بالفعل');

              // إذا تم توفير سؤال بديل، قم بتحميله
              if (response.replacementQuestionId) {
                // إعادة تحميل الصفحة أو تحميل السؤال الجديد
                alert('تم استبدال السؤال بنجاح! سيتم تحميل السؤال البديل.');

                // تحميل السؤال الجديد - يمكن تعديل هذا وفقًا لطريقة عرض الأسئلة
                loadQuestion(currentQuestionIndex);
              }
            } else {
              alert(response.message || 'فشل استبدال السؤال.');
            }
          },
          error: function () {
            alert('حدث خطأ أثناء محاولة استبدال السؤال.');
          }
        });
      });
    });
  </script>
}
